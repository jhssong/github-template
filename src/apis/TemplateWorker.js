import fs from "fs";
import path from "path";
import createError from "../utils/createError.js";

const MAIN_BRANCH = "main";
const PR_BRANCH = "docs/add-template";
const PR_TITLE = "docs: Add github templates";

const CONFIG_YML_FILE_PATH = ".github/ISSUE_TEMPLATE/config.yml";
const FEATURE_MD_FILE_PATH = ".github/ISSUE_TEMPLATE/feature_request.md";
const FEATURE_YML_FILE_PATH = ".github/ISSUE_TEMPLATE/feature_request.yml";
const BUG_MD_FILE_PATH = ".github/ISSUE_TEMPLATE/bug_report.md";
const BUG_YML_FILE_PATH = ".github/ISSUE_TEMPLATE/bug_report.yml";
const PULL_REQUEST_FILE_PATH = ".github/PULL_REQUEST_TEMPLATE.md";

class TemplateWorker {
  constructor(api, owner, repo, lang) {
    this.api = api;
    this.owner = owner;
    this.repo = repo;
    this.lang = lang;
  }

  async getBranchSHA(branch) {
    const res = await this.api.get(
      `/repos/${this.owner}/${this.repo}/git/ref/heads/${branch}`
    );
    return res.data.object.sha;
  }

  async createBranch(newBranch, baseSha) {
    await this.api.post(`/repos/${this.owner}/${this.repo}/git/refs`, {
      ref: `refs/heads/${newBranch}`,
      sha: baseSha,
    });
  }

  async getFileSHA(filePath, branch) {
    try {
      const res = await this.api.get(
        `/repos/${this.owner}/${this.repo}/contents/${filePath}?ref=${branch}`
      );
      return res.data.sha;
    } catch (error) {
      if (error.response?.status === 404) return null;
      throw createError("TemplateWorker", "Failed to get file SHA", error);
    }
  }

  async deleteFileIfExists(filePath, branch) {
    if (filePath == null) return;
    try {
      const res = await this.api.get(
        `/repos/${this.repo}/contents/${filePath}?ref=${branch}`
      );

      const sha = res.data.sha;

      await this.api.delete(`/repos/${this.repo}/contents/${filePath}`, {
        data: {
          message: `chore: delete existing template file ${filePath}`,
          sha,
          branch,
        },
      });
    } catch (error) {
      if (error.response?.status === 404) return;
      throw createError(
        "TemplateWorker",
        `Failed to delete existing file: ${filePath}`,
        error
      );
    }
  }

  async uploadFile({ content, path, branch, message, sha }) {
    await this.api.put(`/repos/${this.owner}/${this.repo}/contents/${path}`, {
      message,
      content: Buffer.from(content).toString("base64"),
      branch,
      ...(sha && { sha }),
    });
  }

  async createPullRequest({ branch, base, title, body }) {
    await this.api.post(`/repos/${this.owner}/${this.repo}/pulls`, {
      title,
      head: branch,
      base,
      body,
    });
  }

  getTemplateFilesByLang(langCode) {
    const basePath = langCode === 1 ? "src/templates/ko" : "src/templates/en";
    return {
      config: {
        filePath: CONFIG_YML_FILE_PATH,
        deletePath: null,
        localPath: `${basePath}/${CONFIG_YML_FILE_PATH}`,
        commitMsg: "docs: Add issue template config",
      },
      feature: {
        filePath: FEATURE_YML_FILE_PATH,
        deletePath: FEATURE_MD_FILE_PATH,
        localPath: `${basePath}/${FEATURE_YML_FILE_PATH}`,
        commitMsg: "docs: Add feature request template",
      },
      bug: {
        filePath: BUG_YML_FILE_PATH,
        deletePath: BUG_MD_FILE_PATH,
        localPath: `${basePath}/${BUG_YML_FILE_PATH}`,
        commitMsg: "docs: Add bug report template",
      },
      pr: {
        filePath: PULL_REQUEST_FILE_PATH,
        deletePath: null,
        localPath: `${basePath}/${PULL_REQUEST_FILE_PATH}`,
        commitMsg: "docs: Add pull request template",
      },
    };
  }

  getPRBodyByLang() {
    const intro =
      this.lang === 1
        ? "이 PR은 다음과 같은 GitHub 템플릿을 추가합니다:"
        : "This PR adds GitHub Issue and PR templates including:";

    const footer =
      this.lang === 1
        ? "\n\n---\n\n이 PR은 [jhssong/github-template](https://github.com/jhssong/github-template)에 의해 생성되었습니다."
        : "\n\n---\n\nThis PR was generated by [jhssong/github-template](https://github.com/jhssong/github-template).";

    return `${intro}\n\n- Issue template config\n- Feature request template\n- Bug report template\n- Pull request template${footer}`;
  }

  async run() {
    try {
      const templates = this.getTemplateFilesByLang(this.lang);

      // Create branch if not exists
      try {
        await this.getBranchSHA(PR_BRANCH);
        console.log(`ℹ️  Branch ${PR_BRANCH} already exists.`);
      } catch {
        const baseSha = await this.getBranchSHA(MAIN_BRANCH);
        await this.createBranch(PR_BRANCH, baseSha);
        console.log(`✅ Create new branch: ${PR_BRANCH}`);
      }

      for (const key of Object.keys(templates)) {
        const { filePath, localPath, deletePath, commitMsg } = templates[key];

        // Remove old version issue templates
        await this.deleteFileIfExists(deletePath, PR_BRANCH);

        // Upload new templates
        const fileContent = fs.readFileSync(path.resolve(localPath), "utf8");
        const sha = await this.getFileSHA(filePath, PR_BRANCH);

        await this.uploadFile({
          content: fileContent,
          path: filePath,
          branch: PR_BRANCH,
          message: commitMsg,
          sha,
        });
      }
      console.log(`✅ File uploaded to ${PR_BRANCH}.`);

      // Check if pr exists
      const res = await this.api.get(
        `/repos/${this.owner}/${this.repo}/pulls?head=${this.owner}:${PR_BRANCH}&state=open`
      );

      if (res.data.length === 0) {
        await this.createPullRequest({
          branch: PR_BRANCH,
          base: MAIN_BRANCH,
          title: PR_TITLE,
          body: this.getPRBodyByLang(),
        });
        console.log("✅ Pull request created.");
      } else {
        console.log("ℹ️  Pull request already exists.");
      }
    } catch (error) {
      throw createError("TemplateWorker", error.message, error);
    }
  }
}

export default TemplateWorker;
